import{M as i}from"./chunk-HLWAVYOI-QEWNdWnJ.js";import{j as t,a as s,F as l}from"./jsx-runtime-5BUNAZ9W.js";import{useMDXComponents as r}from"./index-_VGcpBFS.js";import"./iframe-fpZiA0nY.js";import"../sb-preview/runtime.js";import"./index-4g5l5LRQ.js";import"./_commonjsHelpers-4gQjN7DL.js";import"./react-18-0wh8ubQX.js";import"./index-ogXoivrg.js";import"./index-MVbLLYTZ.js";import"./index-PPLHz8o0.js";function a(n){const e=Object.assign({h1:"h1",p:"p",blockquote:"blockquote",h3:"h3",em:"em"},r(),n.components);return s(l,{children:[t(i,{title:"Content/Goals & Principles"}),`
`,t(e.h1,{id:"goals--principles",children:"Goals & Principles"}),`
`,t(e.p,{children:"Many of us who work at Element, and a sizeable chunk of the users we serve, are highly technical people. We deeply understand the complexity of building secure communication tools on a decentralised network—including what things are called and how they work. The problem is that when technical people build software, we often forget one crucial fact:"}),`
`,s(e.blockquote,{children:[`
`,t(e.h3,{id:"most-users-dont-understand-the-technical-stuff-and-they-shouldnt-have-to-in-order-to-use-element",children:t(e.em,{children:"Most users don’t understand the technical stuff, and they shouldn’t have to in order to use Element."})}),`
`]}),`
`,t(e.p,{children:"They just want to know that things are working properly. Or, if there’s a problem, they want to know how to fix it as quickly as possible. Otherwise, the tool should get out of their way and let them focus on what’s actually important: communicating with people. That’s a reasonable expectation in a world filled with suitable, familiar alternatives."}),`
`,t(e.p,{children:"So how do we design software that serves both the technically-minded experts and untechnical novices? We start with some guiding principles that can help us make better decisions about any new feature, content, or flow:"}),`
`,t(e.h3,{id:"1-the-user-should-always-feel-calm-and-in-control",children:"1. The user should always feel calm and in control"}),`
`,t(e.p,{children:"They should never feel worried, anxious, confused, uncertain, stupid, or unable to complete an intended action."}),`
`,s(e.h3,{id:"2-the-user-should-be-able-to-assume-safety-and-security-unless-indicated-otherwise",children:["2. The user should be able to ",t(e.em,{children:"assume"})," safety and security unless indicated otherwise"]}),`
`,t(e.p,{children:"Get out of the user’s way whenever possible, and don’t constantly bombard them with contextual information that may confuse or unnecessarily alarm them."}),`
`,t(e.h3,{id:"3-icons-and-terms-should-only-represent-one-concept-or-thing",children:"3. Icons and terms should only represent one concept or thing"}),`
`,t(e.p,{children:"The ideal icon is both self-evident to the user and easy to remember. Any term should be self-explanatory and use common language, unless it’s absolutely necessary to be technical."}),`
`,t(e.h3,{id:"4-be-consistent",children:"4. Be consistent"}),`
`,t(e.p,{children:"Use the same terminology to label or describe something no matter where it’s shown in the user interface (UI), especially when communicating about security topics or specific features."})]})}function c(n={}){const{wrapper:e}=Object.assign({},r(),n.components);return e?t(e,{...n,children:t(a,{...n})}):a(n)}const h=()=>{throw new Error("Docs-only story")};h.parameters={docsOnly:!0};const o={title:"Content/Goals & Principles",tags:["stories-mdx"],includeStories:["__page"]};o.parameters=o.parameters||{};o.parameters.docs={...o.parameters.docs||{},page:c};const _=["__page"];export{_ as __namedExportsOrder,h as __page,o as default};
